name: Deploy to Dev

on: [deployment]

jobs:
  deployment:
    runs-on: ubuntu-latest
    env:
      APP_ID: decent-digit-629
      NODE_ENV: production
      DB_PORT: 3306
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v1'
      - name: 'Deployment pending'
        uses: 'deliverybot/status@master'
        with:
          state: 'pending'
          token: '${{secrets.GITHUB_TOKEN}}'
      - name: 'Setup python'
        uses: actions/setup-python@v1
        with:
          python-version: '3.7.x'
          architecture: 'x64'
    
      - name: 'Authenticate with Google Cloud'
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_key: ${{secrets.GCP_SA_KEY}}
      
      # - run: gcloud info
      
      # Actual deployment
      - name: 'Deploy ${{ github.event.deployment.environment }}'
        run: |
          echo "task - ${{ github.event.deployment.task }}"
          echo "environment - ${{ github.event.deployment.environment }}"
          echo "payload - ${{ toJson(github.event.deployment.payload) }}"
          ls
      
      - name: 'Setup MySQL'
        run: |
          sudo apt-get install libmysqlclient-dev
          pip install mysqlclient
      
      - name: 'Install kubernetes'
        run: pip install kubernetes
        
      - name: 'Install packages'
        run: |
          pip install -t lib codeforlife-portal
          pip install -t lib --pre --upgrade --no-deps aimmo
          pip install beautifulsoup4
          pip install requests
          pip install -t lib requests-toolbelt
          python install_gaerpytz.py
      
      - name: 'Collect resources'
        run: python manage.py collectstatic --noinput
      
      
      - name: 'Restart MySQL'
        run: |
          sudo sed -i '/\[mysqld\]/assl = 1' /etc/mysql/mysql.conf.d/mysqld.cnf
          sudo service mysql restart
          
      - name: 'gcloud: set project id'
        run: gcloud config set project ${APP_ID}
          
      - name: 'Get cluster credentials'
        run: gcloud container clusters get-credentials ${{ github.event.deployment.environment }} --zone europe-west1-b
      
      - run: kubectl config view

      - name: Put service account in file
        run: echo $GCP_SA_KEY | base64 --decode > /tmp/gcp_sa_key.json
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: 'Deploy k8s'
        run: python clusters_setup/deploy.py ${{ github.event.deployment.environment }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp_sa_key.json

      - name: 'Migrate database (if needed)'
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances="decent-digit-629:europe-west1:db"=tcp:3306 &
          python manage.py migrate --no-input
        env:
          DATABASE_NAME: 'cfl_${{ github.event.deployment.environment }}'
          CLOUD_SQL_HOST: ${{ secrets.CLOUD_SQL_HOST }}
          CLOUD_SQL_PASSWORD: ${{ secrets.CLOUD_SQL_PASSWORD }}
      
      - name: 'Deploy Django app on AppEngine'
        run: gcloud app --quiet deploy app.yaml --project ${APP_ID} --no-promote

      - name: 'Deploy cron.yaml'
        run: gcloud app --quiet deploy cron.yaml --project ${APP_ID} --no-promote

      - name: 'Test deployment'
        run: ./test.sh ${{ github.event.deployment.environment }} default

      - name: 'Deployment success'
        if: success()
        uses: 'deliverybot/status@master'
        with:
          state: 'success'
          token: '${{ secrets.GITHUB_TOKEN }}'

      - name: 'Deployment failure'
        if: failure()
        uses: 'deliverybot/status@master'
        with:
          state: 'failure'
          token: '${{ secrets.GITHUB_TOKEN }}' 
